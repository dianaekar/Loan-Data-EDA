# -*- coding: utf-8 -*-
"""Diana Eka Riyani_VIX_ID/X Partners

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mmV4xFGGEN44b0rYp_V7ja0lq63IURiT

# **1. Data Requirements** <a class="anchor" id="5"></a>

Lending Club is the largest online loan marketplace, facilitating personal loans, business loans, and financing of medical procedures. Borrowers can easily access lower interest rate loans through a fast online interface.

These files contain complete loan data for all loans issued through the 2007-2014, including the current loan status (Current, Charged-off, Fully Paid, etc.) and latest payment information. The file containing loan data through the "present" contains complete loan data for all loans issued through the previous completed calendar quarter.

# **2. Data Collection** <a class="anchor" id="5"></a>
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
import seaborn as sns 
import statsmodels.api as sm
# %matplotlib inline

import pandas as pd
import numpy as np
import statsmodels.api as sm
import scipy.stats as st
import matplotlib.pyplot as plt
import seaborn as sn
from sklearn.metrics import confusion_matrix
import matplotlib.mlab as mlab
# %matplotlib inline

import warnings

warnings.filterwarnings('ignore')

from google.colab import drive

drive.mount('/content/drive', force_remount=True)

df = pd.read_csv('/content/drive/My Drive/loan_data_2007_2014.csv')
df

"""# **3. Data Understanding** <a class="anchor" id="5"></a>


"""

# preview the dataset

df.head()

# view dimensions of dataset

df.shape

# view columns of dataset

df.columns

# view summary of dataset

df.info()

"""# **4. Data Preparation** <a class="anchor" id="5"></a>


"""

#cek data duplicated

df.duplicated().sum()

# cek missing value

df.isnull().sum()

# print variables in dataset containing missing values

df_loan = [var for var in df if df[var].isnull().sum()!=0]

print(df[df_loan].isnull().sum())

# remove all the rows that contain a missing value

df.dropna()

# remove all columns with at least one missing value

columns_with_na_dropped = df.dropna(axis=1)
columns_with_na_dropped.head()

# just how much data did we lose?

print("Columns in original dataset: %d \n" % df.shape[1])
print("Columns with na's dropped: %d" % columns_with_na_dropped.shape[1])

# cek missing value after being columns with na's dropped

loan_data = columns_with_na_dropped.isnull().sum()
loan_data

# loan_data is the same as columns_with_na_dropped

loan_data = columns_with_na_dropped
loan_data

# view columns of loan_data

loan_data.columns

# view dimensions of loan_data

loan_data.shape

# cek loan_data status with value count

loan_data['loan_status'].value_counts()

# change loan_status

loan_data['loan_status'] = loan_data['loan_status'].replace(['Late (31-120 days)', 'Late (16-30 days)','Default', 'In Grace Period', 'Does not meet the credit policy. Status:Charged Off', 'Current', 'Does not meet the credit policy. Status:Fully Paid'], ['Charged Off', 'Charged Off', 'Charged Off', 'Charged Off', 'Charged Off','Fully Paid', 'Fully Paid'])

# cek loan_data status with value count after changing loan_status

loan_data['loan_status'].value_counts()

"""# **5. Exploratory Data Analysis** <a class="anchor" id="5"></a>"""

loan_status = loan_data['loan_status'].value_counts().head(20)

# visualize data loan_status to bar chart

plt.figure(figsize=(20,6))

plt.subplot(1,2,2)
loan_status.plot(kind='bar')
plt.title('Loan Status')

plt.show()

# visualize data loan_status to line chart

plt.figure(figsize=(20,6))

plt.subplot(1,2,1)
loan_status.plot(kind='line')
plt.title('Loan Status')

plt.show()

# visualize data loan_status by term

sns.countplot(data=loan_data,
              x='term',
              hue='loan_status')

plt.show()

# visualize data loan_status by grade

sns.countplot(data=loan_data,
              x='grade',
              hue='loan_status')

plt.show()